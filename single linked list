#include <iostream>
using namespace std;

template <typename T>
class Node {
public:
    T data;
    Node* next;

    Node(T val) : data(val), next(nullptr) {}
};

template <typename T>
class singleLinkedList {
public:
    singleLinkedList() : head(nullptr), tail(nullptr) {}
    ~singleLinkedList();
    void push(T element);
    void show();

private:
    Node<T>* head;
    Node<T>* tail;
};

template <typename T>
singleLinkedList<T>::~singleLinkedList() {
    Node<T>* current = head;
    Node<T>* nextNode = nullptr;
    while (current != nullptr) {
        nextNode = current->next;
        delete current;
        current = nextNode;
    }
}

template <typename T>
void singleLinkedList<T>::push(T element) {
    Node<T>* newNode = new Node<T>(element);
    if (tail == nullptr) {
        head = tail = newNode;
    }
    else {
        tail->next = newNode;
        tail = newNode;
    }
}

template <typename T>
void singleLinkedList<T>::show() {
    Node<T>* current = head;
    while (current != nullptr) {
        cout << current->data;
        if (current->next != nullptr) {
            cout << " -> ";
        }
        current = current->next;
    }
    cout << " ->" << endl;
}


int main() {
    singleLinkedList<int>* idx = new singleLinkedList<int>();
    idx->push(1);
    idx->push(2);
    idx->push(3);
    idx->push(4);
    idx->push(5);
    idx->show();

    delete idx;
    return 0;
}
